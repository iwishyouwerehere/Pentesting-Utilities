# You can adjust the range as needed 146150163733090291820368483271628301965593 append before 1461501637330902918203684832716283019655932542464


import json
import binascii
import time
from ecdsa import SigningKey, SECP256k1

def private_key_to_public_key(private_key):
    sk = SigningKey.from_secret_exponent(private_key, curve=SECP256k1)
    vk = sk.verifying_key
    return vk.to_string("uncompressed"), vk.to_string("compressed")

def save_to_json(data, filename="keys1.json"):
    with open(filename, "w") as file:
        json.dump(data, file, indent=4)

def main():
    initial_private_key = 1461501637330902918203684832716283019655932542464
    target_compressed_pub_key = "02e0a8b039282faf6fe0fd769cfbc4b6b4cf8758ba68220eac420e32b91ddfa673"
    total_iterations = 932542464   # Adjust the range as needed
    key_data = []
    start_time = time.time()

    for i in range(total_iterations):
        current_time = time.time()
        elapsed_time = current_time - start_time
        if i > 0:
            eta = (elapsed_time / i) * (total_iterations - i)
        else:
            eta = 0
        percent_complete = (i / total_iterations) * 100

        uncompressed_pub_key, compressed_pub_key = private_key_to_public_key(initial_private_key - i)
        hex_compressed_pub_key = binascii.hexlify(compressed_pub_key).decode()

        if hex_compressed_pub_key == target_compressed_pub_key:
            print("FOUND")
            x, y = uncompressed_pub_key[:32], uncompressed_pub_key[32:]
            key_info = {
                "private_key": initial_private_key - i,
                "x_coordinate": int.from_bytes(x, "big"),
                "y_coordinate": int.from_bytes(y, "big"),
                "compressed_pub_key": hex_compressed_pub_key
            }
            print(json.dumps(key_info, indent=4))
            break  # Stop the loop

        key_data.append({
            "private_key": initial_private_key - i,
            "compressed_pub_key": hex_compressed_pub_key
        })

        print(f"Progress: {percent_complete:.2f}%, ETA: {eta:.2f} seconds", end='\r')

    save_to_json(key_data)

if __name__ == "__main__":
    main()
