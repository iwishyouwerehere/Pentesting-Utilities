import requests
import dns.resolver
import json
from OpenSSL import SSL
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm

def dns_enumeration(domain):
    try:
        answers = dns.resolver.resolve(domain, 'NS')
        for rdata in answers:
            print('Host', rdata.target)
    except Exception as e:
        print("Error occurred: ", e)

def check_subdomain(subdomain):
    try:
        answers = dns.resolver.resolve(subdomain)
        for rdata in answers:
            print(f'Subdomain: {subdomain}, IP: {rdata.address}')
    except Exception as e:
        pass  # Subdomain does not exist

def subdomain_brute_forcing(domain):
    wordlist_url = "https://raw.githubusercontent.com/n0kovo/n0kovo_subdomains/main/n0kovo_subdomains_huge.txt"
    response = requests.get(wordlist_url)
    subdomains = response.text.split("\n")
    subdomains = [f"{sub}.{domain}" for sub in subdomains]
    with ThreadPoolExecutor(max_workers=499) as executor:
        list(tqdm(executor.map(check_subdomain, subdomains), total=len(subdomains)))

def certificate_info(domain):
    try:
        cert = SSL.Context(SSL.SSLv23_METHOD).get_timeout()
        info = cert.get_subject().get_components()
        print(f"Certificate info for {domain}: {info}")
    except Exception as e:
        print(f"Could not retrieve certificate info for {domain}: {e}")

def certificate_transparency_logs(domain):
    url = f"https://crt.sh/?q=%.{domain}&output=json"
    try:
        response = requests.get(url)
        if response.ok:
            data = json.loads(response.text)
            for cert in data:
                print(f"Domain: {cert['name_value']} - Issuer: {cert['issuer_name']}")
                certificate_info(cert['name_value'])
    except Exception as e:
        print("Error occurred: ", e)

def main():
    domain = input("Enter the domain: ")
    dns_enumeration(domain)
    subdomain_brute_forcing(domain)
    certificate_transparency_logs(domain)

if __name__ == "__main__":
    main()
